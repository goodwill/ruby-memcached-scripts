#!/usr/bin/env ruby
# ARG list: (start|stop|restart) (-i instance_name) (-c config_file)
require 'rubygems'
require 'optparse'
class Hash
  def symbolize_keys
    inject({}) do |options, (key, value)|
      options[(key.to_sym rescue key) || key] = value
      options
    end
  end
end
class MemCacheServerStarter
  attr_reader :optparser
  def initialize
    memcached_cmd=%x[which memcached].strip
    config_file="/etc/memcached.yml"
    @options={:memcached_cmd=>memcached_cmd, :config_file=>config_file}
    
    @optparser=OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename(__FILE__)} (start|stop|restart) [options]"
      opts.on("-cmd", "--command COMMAND", "Specify where to get memcache, default seek from environment") do |v|
        @options[:memcached_cmd]=v
      end
      opts.on("-i", "--instance INSTANCE_NAME", "Specify instance name to take action on") do |v|
        @options[:instance]=v
      end
      opts.on('-c', '--config CONFIG_FILE', "Specify configuration file to use") do |v|
        @options[:config_file]=v
      end
      opts.on('-p', '--preview', "Preview commands instead of executing") do
        @options[:preview]=true
      end
      opts.on_tail("-h", "--help", "Show this message") do 
        puts opts
        exit
      end
    end
    
  end
  
  
  def parse(args)
    @options[:action]=args[0]
    begin 
      @optparser.parse!(args)
    rescue OptionParser::InvalidOption => e
      puts e
      puts @optparser
    end
    
    validate_options
    @instances=YAML.load_file(@options[:config_file])
    
  end
  
  def start_server(raw_config_entry)
    config_entry=raw_config_entry.symbolize_keys
    cmd="#{@options[:memcached_cmd]} -d -u #{config_entry[:user]} -l #{config_entry[:address]} -m #{config_entry[:memory]} -p #{config_entry[:port]} -P #{config_entry[:pidfile]}"
    if @options[:preview]
      puts cmd
    else
      puts "execute memcached"
      system(cmd)
    end
  end
  
  def stop_server(raw_config_entry)
    config_entry=raw_config_entry.symbolize_keys
    raise "Unable to find pidfile #{config_entry[:pidfile]}" unless File.exist?(config_entry[:pidfile])
    cmd="kill `cat #{config_entry[:pidfile]}`;rm #{config_entry[:pidfile]}"
    system(cmd)
    
  end
  def restart_server(raw_config_entry)
    stop_server(raw_config_entry)
    sleep 1
    start_server(raw_config_entry)
  end
  
  
  def execute
    case @options[:action]
    when 'start'
      unless @options.has_key?(:instance)
        @instances.each do |key, instance|
          start_server(instance)
        end
      else
        start_server(@instances[@options[:instance]])
      end
    when 'stop'
      unless @options.has_key?(:instance)
        @instances.each do |key, instance|
          stop_server(instance)
        end
      else
        stop_server(@instances[@options[:instance]])
      end

    when 'restart'
      unless @options.has_key?(:instance)
        @instances.each do |key, instance|
          restart_server(instance)
        end
      else
        restart_server(@instances[@options[:instance]])
      end
    end

  end
  
  
  
  def validate_options
    raise "Invalid action" unless ['start','stop','restart'].include?(@options[:action])
    raise "Unable to find memcached" unless File.exist?(@options[:memcached_cmd])
    raise "Unable to find config file: #{@options[:config_file]}" unless File.exist?(@options[:config_file])
  end
  
end


starter=MemCacheServerStarter.new
begin
  starter.parse(ARGV)
rescue Exception=>e
  puts e
  puts starter.optparser
  exit
end

starter.execute



